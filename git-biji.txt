第一步：配置
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

	注意 git config 命令的 --global 参数，用了这个参数，表示你这台机器上所有的Git仓库都
	会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	
第二步：初始化一个Git仓库
	$ git init
	记得把Notepad++的默认编码设置为UTF-8 without BOM（UTF-8 无BOM）即可.
	
第三步：添加文件到Git仓库
	1.创建一个文本文件
	2.git add readme.txt	# 告诉Git，把文件添加到仓库
	3.git commit -m "wrote a readme file"
		用命令 git commit 告诉Git，把文件提交到仓库.
		-m 后面输入的是本次提交的说明
		$ git add file2.txt file3.txt  # 同时提交两个文件
		
第四步：提交修改和提交新文件：（跟新建是一样的）
	1.git add readme.txt
	2.git commit -m "新增或修改了xx内容"
		每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为 commit 。
		一旦你把文件改乱了，或者误删了文件，还可以从最近的一个 commit 恢复。

其他命令：
	$ git status   #显示当前仓库状态
	$ git diff readme.txt	# 查看readme.txt修改内容
	$ git log	# 显示从最近到最远的提交日志
	$ git log --pretty=oneline	# 比较简洁地显示提交日志
		结果类似下面的：
		3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
		ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
		cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file
		类似 3628164...882e1e0 的是 commit id （版本号）
	$ git log --pretty=oneline readme.txt	# 查看某一个文件的日志
	
在Git中，用 HEAD 表示当前版本，上一个版本就是 HEAD^ ，上上一个版本就是 HEAD^^ ，往上100个版本写成 HEAD~100
	$ git reset --hard HEAD^	# 回退到上一个版本，注意:这条命令是把所有文件都回退到上一个版本。
	$ git reset --hard 3628164	# 指定回到未来的某个版本
	$ git reflog	# 记录你曾经用过的每一条命令
	问题：如何只回退某一个文件
	
HEAD 指向的版本就是当前版本
问题：如何查看HEAD的当前位置

工作区（Working Directory）：就是你在电脑里能看到的目录
版本库（Repository）：
	工作区有一个隐藏目录 .git ，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有
	Git为我们自动创建的第一个分支 master ，以及指向 master 的一个指针叫 HEAD 。	
	
Git跟踪并管理的是修改，而非文件：
	第一次修改 -> git add -> 第二次修改 -> git commit
	当你用 git add 命令后，在工作区的第一次修改被
	放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以， git
	commit 只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被
	提交。
	
$ git diff HEAD -- readme.txt 	# 查看工作区和版本库里面最新版本的区别
$ git checkout -- readme.txt	# 直接丢弃工作区的修改
	有两种情况：
		一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样
		的状态；
		一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区
		后的状态。
$ git reset HEAD readme.txt		# 把暂存区的修改撤销掉（unstage），重新放回工作区
	git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区。
	当我们用 HEAD 时，表示最新的版本。
	

删除文件：	（执行完git rm 好像不能再用checkout恢复，但可用 git reset --hard "commit id" 恢复）
	$ git add test.txt	# 添加一个新文件test.txt,  windows版此命令不可用。	
	$ rm test.txt
	$ git rm test.txt
	$ git checkout -- test.txt
	git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	
	命令 git rm 用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误
删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
	1.在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可直接跳到下一步。如果没有，
	打开Shell（Windows下打开Git Bash），创建SSH Key：
		$ ssh-keygen -t rsa -C "youremail@example.com"
		
	2.登陆GitHub--打开“Account settings”，“SSH Keys”页面--点“Add SSH Key”，填上任意Title，在Key文本框里粘贴 id_rsa.pub 文件的内容
	--点“Add Key”，你就应该看到已经添加的Key

	3. $ git remote add origin https://github.com/xianyunguh/test-git.git	# 添加后，远程库的名字就是 origin

	4.把本地库的所有内容推送到远程库上：
		$ git push -u origin master  # 实际上是把当前分支 master 推送到远程。
		由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数，Git不但会把本地的 master 分支内容推送的远程新的 master 分支，
		还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。
		使用命令 git push origin master 推送最新修改；
		
从远程库克隆：
	假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
	克隆一个本地库：
	$ git clone https://github.com/xianyunguh/gitskills.git	
	或：$ git clone git@github.com:xianyunguh/gitskills.git

	GitHub给出的地址不止一个，还可以
	用 https://github.com/michaelliao/gitskills.git 这样的地址。实际上，Git支持多种协议，
	默认的 git:// 使用ssh，但也可以使用 https 等其他协议。
	使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开
	放http端口的公司内部就无法使用 ssh 协议而只能用 https 。

	
	
https://blog.csdn.net/p106786860/article/details/52023885