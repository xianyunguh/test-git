第一步：配置
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"

	注意 git config 命令的 --global 参数，用了这个参数，表示你这台机器上所有的Git仓库都
	会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	
第二步：初始化一个Git仓库
	$ git init
	记得把Notepad++的默认编码设置为UTF-8 without BOM（UTF-8 无BOM）即可.
	
第三步：添加文件到Git仓库
	1.创建一个文本文件
	2.git add readme.txt	# 告诉Git，把文件添加到仓库
	3.git commit -m "wrote a readme file"
		用命令 git commit 告诉Git，把文件提交到仓库.
		-m 后面输入的是本次提交的说明
		$ git add file2.txt file3.txt  # 同时提交两个文件
		
第四步：提交修改和提交新文件：（跟新建是一样的）
	1.git add readme.txt
	2.git commit -m "新增或修改了xx内容"
		每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为 commit 。
		一旦你把文件改乱了，或者误删了文件，还可以从最近的一个 commit 恢复。

其他命令：
	$ git status   #显示当前仓库状态
	$ git diff readme.txt	# 查看readme.txt修改内容
	$ git log	# 显示从最近到最远的提交日志
	$ git log --pretty=oneline	# 比较简洁地显示提交日志
		结果类似下面的：
		3628164fb26d48395383f8f31179f24e0882e1e0 append GPL
		ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
		cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file
		类似 3628164...882e1e0 的是 commit id （版本号）
	$ git log --pretty=oneline readme.txt	# 查看某一个文件的日志
	
在Git中，用 HEAD 表示当前版本，上一个版本就是 HEAD^ ，上上一个版本就是 HEAD^^ ，往上100个版本写成 HEAD~100
	$ git reset --hard HEAD^	# 回退到上一个版本，注意:这条命令是把所有文件都回退到上一个版本。
	$ git reset --hard 3628164	# 指定回到未来的某个版本
	$ git reflog	# 记录你曾经用过的每一条命令
	问题：如何只回退某一个文件
	
HEAD 指向的版本就是当前版本
问题：如何查看HEAD的当前位置

工作区（Working Directory）：就是你在电脑里能看到的目录
版本库（Repository）：
	工作区有一个隐藏目录 .git ，这个不算工作区，而是Git的版本库。
	Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有
	Git为我们自动创建的第一个分支 master ，以及指向 master 的一个指针叫 HEAD 。	
	
Git跟踪并管理的是修改，而非文件：
	第一次修改 -> git add -> 第二次修改 -> git commit
	当你用 git add 命令后，在工作区的第一次修改被
	放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以， git
	commit 只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被
	提交。